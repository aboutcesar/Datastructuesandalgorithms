1. 
def recursivemax(S, x):
	if x == len(S)-1:
		return S[x]
	return max(S[n], S[x+1])
def get_max(S):
	recursivemax(S,0)

The run time for this is O(n) as the sequence would have to be looped through one by one. Similar 
to the factorial function the max function exicutes a constant number of operatons. Furthermore, 
there is one recursivve invocation upon each entry at each nesting level. There are O(n)
calls each running at O(1) time. 
 
2. 
def power(x, n):
”””Compute the value x n for integer n.””
     if n == 0:
          return 1
     else:
          return x*power(x, n−1)

for power(2,5) x =2, n=5
2*(the return going down to the base which is 1)

2*power(2,5)	    return 32
  2*power(2,4)       return 16
    2*power(2,3)      return 8
      2*power(2,2)     return 4
	2*power(2,1)    return 2
	  2*power(2,0)   return 1

3. 
def power(x, n):
”””Compute the value x n for integer n.”””
if n == 0:
     return 1
else:
     partial = power(x, n // 2) # rely on truncated division
     result = partial*partial

     if n % 2 == 1: # if n odd, include extra factor of x
          result *= x
     return result

for power(2,18) where x = 2, n = 18


power(2,18)      return 262144
  power(2,9)      return 512
    power(2,4)     return 16
      power(2,2)    return 4
        power(2,1)   return 2
          power(2,0)  return 1

4. 

def reverse(S, start, stop):
	”””Reverse elements in implicit slice S[start:stop].”””
	if start < stop − 1: # if at least 2 elements:
		S[start], S[stop−1] = S[stop−1], S[start] # swap first and last
		reverse(S, start+1, stop−1) 

on reverse(S,0,5) for S = [4, 3, 6, 2, 6]

reverse(S,0,5)   return [6, 2, 6, 3, 4]
 reverse(S,1,4)   return [4, 2, 6, 3, 6]
  reverse(S,2,3)   no change [4, 3, 6, 2, 6]
   


6. 

def harmonic(k):
     if k == 1
          return 1
     return 1/k+harmonic(k-1)


7. 
def str_to_int(s, i = 0):
     length = len(s)
     if i == length-1:
	return int((string)s[i])
     return stringstr_to_int(s,i+1) + 10*int(string(s[i]))

8. 
 
def sum_sequence(a):
     length = len(a)/2
     
     if len(a) == 1:
	return 1
     else:
	list b[length/2]
        for i in range(length):
	     b[i] = a[2*i]+a[2*i+1]
     
     return sum_sequence(b[length])

this is a O(logn). 

Creativity

9.

def find_min_max(s, i = 0):







